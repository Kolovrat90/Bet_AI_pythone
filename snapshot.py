#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞.
–ò—Å–∫–ª—é—á–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (–≤–∫–ª—é—á–∞—è JSON-–¥–∞–º–ø—ã).
"""

from pathlib import Path
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
PROJECT_DIR   = Path(r"C:\Code Projects\Bet_AI_pythone")  # –≤–∞—à –ø—Ä–æ–µ–∫—Ç
SNAP_DIR      = PROJECT_DIR / "snapshots"
MAX_SNAPS     = 5
MAX_INLINE_KB = 200  # –ø–æ—Ä–æ–≥ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
EXCLUDE_DIRS   = {".venv", "snapshots", "__pycache__", ".git", ".streamlit"}
EXCLUDE_NAMES  = {".env", "secrets.toml"}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è ¬´–±–∏–Ω–∞—Ä–Ω—ã–º–∏¬ª –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è
BINARY_EXTS = {
    ".sqlite", ".db", ".log",
    ".png", ".jpg", ".jpeg", ".gif",
    ".bin", ".exe", ".pkl",
    ".json"    # —Ç–µ–ø–µ—Ä—å –∏—Å–∫–ª—é—á–∞–µ–º –∏ JSON-—Ñ–∞–π–ª—ã
}

# –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É –¥–ª—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
SNAP_DIR.mkdir(exist_ok=True)

# –ò–º—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
timestamp     = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
snapshot_file = SNAP_DIR / f"snapshot_{timestamp}.txt"


def should_skip(path: Path) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
    """
    # –ø–æ —á–∞—Å—Ç–∏ –ø—É—Ç–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    if any(part in EXCLUDE_DIRS for part in path.parts):
        return True
    # –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
    if path.name in EXCLUDE_NAMES:
        return True
    # –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if path.suffix.lower() in BINARY_EXTS:
        return True
    return False


def create_snapshot():
    with snapshot_file.open("w", encoding="utf-8") as out:
        out.write(f"=== Snapshot of {PROJECT_DIR} at {datetime.now()} ===\n\n")

        for p in sorted(PROJECT_DIR.rglob("*")):
            rel = p.relative_to(PROJECT_DIR)
            if should_skip(p):
                continue

            if p.is_dir():
                out.write(f"[DIR ] {rel}\n")
            else:
                size_kb = p.stat().st_size // 1024
                out.write(f"[FILE] {rel} ({size_kb} KB)\n")

                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî –Ω–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if size_kb > MAX_INLINE_KB:
                    out.write(f"  # skipped content ({size_kb} KB > {MAX_INLINE_KB} KB)\n\n")
                    continue

                # –í—Å—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                try:
                    text = p.read_text(encoding="utf-8", errors="replace")
                except Exception as e:
                    out.write(f"  # unable to read file: {e}\n\n")
                    continue

                out.write("----- begin content -----\n")
                out.write(text)
                out.write("\n-----  end content  -----\n\n")

        out.write("=== End of snapshot ===\n")

    print(f"‚úÖ Snapshot saved to: {snapshot_file}")


def prune_old_snapshots():
    snaps = sorted(
        SNAP_DIR.glob("snapshot_*.txt"),
        key=lambda p: p.stat().st_mtime,
        reverse=True
    )
    for old in snaps[MAX_SNAPS:]:
        try:
            old.unlink()
            print(f"üóë Removed old snapshot: {old.name}")
        except Exception:
            pass


if __name__ == "__main__":
    create_snapshot()
    prune_old_snapshots()
