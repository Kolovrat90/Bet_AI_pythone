import os
from datetime import datetime, date, time as dt_time, timezone
import streamlit as st
import pandas as pd

from betai.pipelines import scan_days, quick_screen, detailed_analysis
from betai.models import allocate_bank

# ‚îÄ‚îÄ Page config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="BetAI ‚Äì Value Betting Scanner", page_icon="‚öΩ", layout="wide")
st.markdown("# ‚öΩ BetAI ‚Äì Value Betting Scanner (v2)")

# ‚îÄ‚îÄ API key ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
API_KEY = st.secrets.get("APIFOOTBALL_KEY") or os.getenv("APIFOOTBALL_KEY")
if not API_KEY:
    st.error("–ù—É–∂–µ–Ω –∫–ª—é—á APIFOOTBALL_KEY –≤ .streamlit/secrets.toml –∏–ª–∏ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

# ‚îÄ‚îÄ Inputs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
c0, c1, c2 = st.columns([1, 2, 2])
with c0:
    today_only = st.checkbox("–°–µ–≥–æ–¥–Ω—è", True)
with c1:
    edge_pct = st.slider("–ü–æ—Ä–æ–≥ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, %", 1, 10, 5)
with c2:
    bank = st.number_input("–ë–∞–Ω–∫, ‚Ç¨", min_value=10.0, step=50.0, value=1000.0, format="%.2f")

days  = 1 if today_only else st.selectbox("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥", [1, 2, 3], 0)
top_n = st.selectbox("–¢–æ–ø-–ª–∏–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", [10, 15, 20, 25, 30], 0)

btn_scan  = st.button("üîç –ü–æ–ª–Ω—ã–π —Å–∫–∞–Ω",   type="primary")
btn_quick = st.button("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω", type="secondary")
btn_calc  = st.button("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–≤–∫–∏")

# ‚îÄ‚îÄ Cached full scan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_data(show_spinner=False)
def _full_scan(d, e, n):
    return scan_days(d, e, n)

# ‚îÄ‚îÄ –®–∞–≥ 1: –ø–æ–ª–Ω—ã–π —Å–∫–∞–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_scan:
    outs = _full_scan(days, edge_pct/100.0, top_n)
    st.session_state["outs_raw"] = outs
    st.session_state.pop("candidates", None)
    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(outs)} value-–∏—Å—Ö–æ–¥–æ–≤ (edge ‚â• {edge_pct} %)")

# ‚îÄ‚îÄ –®–∞–≥ 1b: –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_quick:
    cands = quick_screen(days, top_n)
    st.session_state["candidates"] = cands
    st.session_state.pop("outs_raw", None)
    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(cands)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω")

# ‚îÄ‚îÄ –®–∞–≥ 2: —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if "outs_raw" in st.session_state or "candidates" in st.session_state:
    metrics_ph = st.empty()
    table_ph   = st.empty()

    # ======== –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω =================================================
    if "candidates" in st.session_state:
        raw = st.session_state["candidates"]
        rows = []
        for f in raw:
            ts = datetime.fromtimestamp(f["fixture"]["timestamp"], tz=timezone.utc)
            rows.append({
                "No":        None,
                "Use":       True,
                "Date":      ts.date().isoformat(),
                "Time":      ts.time().strftime("%H:%M"),
                "League":    f["league"]["name"],
                "Match":     f["teams"]["home"]["name"] + " ‚Äì " + f["teams"]["away"]["name"],
                "Side":      f["side"],
                "p_est %":   round(f["p_est"]*100, 1),
                "Avg Odds":  f["k_mean"],
                "Value‚âà":    round(f["value_approx"], 3),
            })
        df = pd.DataFrame(rows)
        df["No"] = range(1, len(df)+1)
        view = df[["No","Use","Date","Time","League","Match","Side","p_est %","Avg Odds","Value‚âà"]]
        edited = table_ph.data_editor(
            view,
            hide_index=True,
            column_config={
                "Use":      st.column_config.CheckboxColumn(),
                "p_est %":  st.column_config.NumberColumn(format="%.1f %"),
                "Avg Odds": st.column_config.NumberColumn(format="%.3f"),
                "Value‚âà":   st.column_config.NumberColumn(format="%.3f"),
            },
            use_container_width=True,
        )
        st.session_state["edited"] = ("candidates", edited)

    # ======== –ü–æ–ª–Ω—ã–π —Å–∫–∞–Ω ====================================================
    else:
        outs = st.session_state["outs_raw"]
        df = pd.DataFrame(o.model_dump() for o in outs)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        df["edge"]      = [o.edge for o in outs]
        df["stake_eur"] = [o.stake_eur for o in outs]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º flag_url
        if "flag_url" not in df.columns:
            df["flag_url"] = ""

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—à–ª—ã–µ –º–∞—Ç—á–∏
        now = datetime.now()
        df = df[df.apply(
            lambda r: datetime.combine(date.fromisoformat(r.date),
                                       dt_time.fromisoformat(r.time)) > now,
            axis=1
        )].reset_index(drop=True)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        df.insert(0, "No",  range(1, len(df)+1))
        df.insert(1, "Use", True)
        df["Edge %"]  = (df["edge"] * 100).round(1)
        df["Stake ‚Ç¨"] = 0
        df["Flag"]    = df["flag_url"]

        df = df.rename(columns={
            "date":    "Date",  "time":   "Time",
            "league":  "League","match":  "Match",
            "pick_ru": "Pick",  "k_dec":  "Min Odds"
        })

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã ===
        expected_columns = [
            "No", "Use", "Date", "Time", "Flag", "League", "Match",
            "Pick", "Min Odds", "Edge %", "Stake ‚Ç¨"
        ]
        if df.empty:
            df = pd.DataFrame(columns=expected_columns)

        view = df[expected_columns]
        edited = table_ph.data_editor(
            view,
            hide_index=True,
            column_config={
                "No":      st.column_config.NumberColumn("‚Ññ", format="%d", disabled=True),
                "Use":     st.column_config.CheckboxColumn(),
                "Flag":    st.column_config.ImageColumn("", width="small"),
                "Edge %":  st.column_config.NumberColumn(format="%.1f %"),
                "Stake ‚Ç¨": st.column_config.NumberColumn(format="%d"),
            },
            use_container_width=True,
        )
        st.session_state["edited"] = ("full", edited)

# ‚îÄ‚îÄ –®–∞–≥ 3: —Ä–∞—Å—á—ë—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_calc:
    if "edited" not in st.session_state:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–∫–∞–Ω.")
        st.stop()

    mode, edited = st.session_state["edited"]
    if mode == "candidates":
        raw  = st.session_state["candidates"]
        mask = edited["Use"].tolist()
        kept = [c for c, m in zip(raw, mask) if m]
        if not kept:
            st.warning("–ù–µ—á–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞.")
            st.stop()

        outs = detailed_analysis(kept, edge_pct/100.0)
    else:
        raw  = st.session_state["outs_raw"]
        mask = edited["Use"].tolist()
        outs = [o for o, m in zip(raw, mask) if m]

        if not outs:
            st.warning("–ù–µ—á–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞.")
            st.stop()

    allocate_bank(outs, bank)

    # –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    rows = []
    for i, o in enumerate(outs, 1):
        rows.append({
            "No":        i,
            "Date":      o.date,
            "Time":      o.time,
            "League":    o.league,
            "Match":     o.match,
            "Pick":      o.pick_ru.replace("–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤","–•–æ–∑—è–µ–≤–∞")
                                   .replace("–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π","–ì–æ—Å—Ç–∏"),
            "Min Odds":  o.k_dec,
            "Edge %":    round(o.edge*100, 1),
            "Stake ‚Ç¨":   o.stake_eur,
        })
    df_fin = pd.DataFrame(rows)

    # –ú–µ—Ç—Ä–∏–∫–∏
    if not df_fin.empty:
        cols = metrics_ph.columns(len(df_fin.columns))
        cols[df_fin.columns.get_loc("Min Odds")].metric("‚åÄ Min Odds", f"{df_fin['Min Odds'].mean():.2f}")
        cols[df_fin.columns.get_loc("Edge %")].metric("‚åÄ Edge %",    f"{df_fin['Edge %'].mean():.1f} %")
        cols[df_fin.columns.get_loc("Stake ‚Ç¨")].metric("Œ£ Stake ‚Ç¨",  f"{df_fin['Stake ‚Ç¨'].sum():.0f}")

    table_ph.dataframe(
        df_fin,
        hide_index=True,
        use_container_width=True,
        column_config={"Stake ‚Ç¨": st.column_config.NumberColumn(format="%d")},
    )

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    for o in outs:
        with st.expander(f"{o.league}: {o.match} ‚Üí {o.pick_ru}, Stake {o.stake_eur} ‚Ç¨"):
            st.write({
                "p_model": f"{o.p_model:.3f}",
                "edge":    f"{o.edge*100:.1f} %",
                "f_raw":   f"{o.f_raw:.3f}",
                "f_final": f"{o.f_final:.3f}",
            })
            st.bar_chart({"p_model": [o.p_model]})
