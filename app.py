# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  app.py  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""Streamlit GUI for BetAI (v3.2) ‚Äì –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ Edge."""

import os
from datetime import datetime
from typing import Dict, Tuple, List

import numpy as np
import pandas as pd
import streamlit as st

from betai.pipelines import quick_screen, detailed_analysis
from betai.models     import allocate_bank, Outcome          # —É–∂–µ –±—ã–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ
from betai.utils      import render_outcome

# ‚îÄ‚îÄ Page config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="BetAI ‚Äì Value Betting Scanner",
                   page_icon="‚öΩ", layout="wide")
st.markdown("# ‚öΩ BetAI ‚Äì Value Betting Scanner (v3.2)")

# ‚îÄ‚îÄ API-–∫–ª—é—á  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if not (st.secrets.get("APIFOOTBALL_KEY") or os.getenv("APIFOOTBALL_KEY")):
    st.error("–ù—É–∂–µ–Ω –∫–ª—é—á **APIFOOTBALL_KEY** –≤ `.streamlit/secrets.toml` "
             "–∏–ª–∏ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

# ‚îÄ‚îÄ –°–∞–π–¥–±–∞—Ä: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

today_only = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è", value=True)
days = 1 if today_only else st.sidebar.selectbox("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥",
                                                 [1, 2, 3], index=0)

threshold_mode = st.sidebar.radio("–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞ Edge",
                                  ["–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π", "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π"], index=0)
if threshold_mode == "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π":
    edge_pct_static = st.sidebar.slider("Edge %, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π",
                                        1.0, 10.0, 4.0, 0.5)
else:
    st.sidebar.markdown("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π: –≤–µ—Ä—Ö–Ω—è—è —Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, "
                        "–Ω–æ **‚â• 4 %**")

bank = st.sidebar.number_input("–ë–∞–Ω–∫, ‚Ç¨",
                               min_value=10.0, value=1000.0,
                               step=50.0, format="%.2f")
top_n = st.sidebar.selectbox("–¢–æ–ø-–ª–∏–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                             [10, 15, 20, 25, 30], index=0)
max_events = 30   # –∂—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç fast-—ç—Ç–∞–ø–∞

# ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∏-—à–∞–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
col_btn = st.columns(3)
btn_fast  = col_btn[0].button("‚ö° 1. –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω",  use_container_width=True)
btn_deep  = col_btn[1].button("üîç 2. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑", use_container_width=True)
btn_stake = col_btn[2].button("üí∞ 3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–≤–∫–∏",
                              use_container_width=True)

table_ph   = st.empty()
notice_ph  = st.empty()
metrics_ph = st.empty()

# ‚îÄ‚îÄ –®–∞–≥-1: –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_fast:
    cand = quick_screen(days, top_n, max_events=max_events)
    st.session_state["fast_raw"] = cand

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º DataFrame
    rows = []
    for i, c in enumerate(cand, 1):
        ts = datetime.fromtimestamp(c["fixture"]["timestamp"])
        rows.append(dict(
            No         = i,
            Use        = True,
            Date       = ts.date().isoformat(),
            Time       = ts.time().strftime("%H:%M"),
            League     = c["league"]["name"],
            Match      = c["teams"]["home"]["name"] + " ‚Äì " +
                         c["teams"]["away"]["name"],
            side       = c["side"],
            p_est      = round(c["p_est"] * 100, 1),
            k_mean     = c["k_mean"],
            value_approx = round(c["value_approx"], 3),
            Flag       = c["league"]["flag"],
            Min_Odds   = None,
            Edge_pct   = None,
            Stake_eur  = 0,
        ))

    df_fast = pd.DataFrame(rows)[
        ["No", "Use", "Date", "Time", "League", "Match", "side",
         "p_est", "k_mean", "value_approx",
         "Min_Odds", "Edge_pct", "Stake_eur"]
    ]

    edited = table_ph.data_editor(
        df_fast,
        hide_index=True,
        column_config={
            "Use": st.column_config.CheckboxColumn(),
            "p_est": st.column_config.NumberColumn("p_est %", format="%.1f %"),
            "k_mean": st.column_config.NumberColumn("Avg Odds", format="%.3f"),
            "value_approx": st.column_config.NumberColumn("Value‚âà",
                                                          format="%.3f"),
        },
        use_container_width=True,
        key="fast_editor",
    )
    st.session_state["edited_d"] = edited
    st.session_state["deep_done"] = False
    notice_ph.info(f"–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω: {len(df_fast)} —Å–æ–±—ã—Ç–∏–π")

# ‚îÄ‚îÄ –®–∞–≥-2: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_deep:
    if "edited_d" not in st.session_state:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω.")
        st.stop()

    df_e = st.session_state["edited_d"]
    raw  = st.session_state["fast_raw"]

    mask = df_e["Use"].tolist()
    kept = [r for r, m in zip(raw, mask) if m]

    if not kept:
        notice_ph.info("–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞.")
        st.session_state["deep_map"]  = {}
        st.session_state["deep_done"] = True
        st.stop()

    # deep-—ç—Ç–∞–ø —Å–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ—Ç –í–°–ï –∏—Å—Ö–æ–¥—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
    outs: List[Outcome] = detailed_analysis(kept, edge_min=None)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥
    edges = np.array([o.edge for o in outs])
    dyn_thr = max(0.04, np.percentile(edges, 66))   # ‚â• 4 %
    if threshold_mode == "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π":
        edge_thr = dyn_thr
    else:
        edge_thr = edge_pct_static / 100

    outs = [o for o in outs if o.edge >= edge_thr]
    deep_map: Dict[Tuple[str, str], Outcome] = {
        (o.match, o.market): o for o in outs
    }

    st.session_state["deep_map"]  = deep_map
    st.session_state["deep_done"] = True
    notice_ph.success(
        f"–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª {len(outs)} –∏—Å—Ö–æ–¥–æ–≤ "
        f"(edge ‚â• {edge_thr*100:.1f} %)"
    )

    # enrich table
    def enrich(row):
        key = (row["Match"], "1X2")      # –ø–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–æ–∫ 1X2
        o = deep_map.get(key)
        if o:
            row["Min_Odds"] = o.k_dec
            row["Edge_pct"] = round(o.edge * 100, 1)
            if o.edge < edge_thr:
                row["Use"] = False
        return row

    df_e = df_e.apply(enrich, axis=1)
    st.session_state["edited_d"] = df_e

    table_ph.dataframe(
        df_e,
        hide_index=True,
        use_container_width=True,
        column_config={
            "Min_Odds": st.column_config.NumberColumn("Min Odds", format="%.3f"),
            "Edge_pct": st.column_config.NumberColumn("Edge %", format="%.1f %"),
        },
    )

    # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫–∏
    st.markdown("## üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    for o in outs:
        with st.expander(f"{o.match} ‚Äì {o.pick_ru}"):
            st.markdown(render_outcome(o))

# ‚îÄ‚îÄ –®–∞–≥-3: —Ä–∞—Å—á—ë—Ç —Å—Ç–∞–≤–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_stake:
    if not st.session_state.get("deep_done"):
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑.")
        st.stop()

    df_e = st.session_state["edited_d"]
    dmap = st.session_state["deep_map"]

    picks = [
        dmap[(row.Match, "1X2")]
        for row in df_e[df_e["Use"]].itertuples(index=False)
        if (row.Match, "1X2") in dmap
    ]

    if not picks:
        st.warning("–ù–µ—Ç –∏—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
        st.stop()

    allocate_bank(picks, bank)

    res = pd.DataFrame([{
        "Date":      o.date,
        "Time":      o.time,
        "League":    o.league,
        "Match":     o.match,
        "Pick":      o.pick_ru,
        "Min Odds":  o.k_dec,
        "Edge %":    round(o.edge * 100, 1),
        "Stake ‚Ç¨":   int(round(o.stake_eur)),
    } for o in picks])

    cols = metrics_ph.columns(3)
    cols[0].metric("‚åÄ Min Odds", f"{res['Min Odds'].mean():.2f}")
    cols[1].metric("‚åÄ Edge %",  f"{res['Edge %'].mean():.1f} %")
    cols[2].metric("Œ£ Stake ‚Ç¨", f"{res['Stake ‚Ç¨'].sum()}",
                   delta=f"{len(res)} picks")

    st.dataframe(
        res,
        hide_index=True,
        use_container_width=True,
        column_config={
            "Edge %": st.column_config.NumberColumn(format="%.1f %"),
        },
    )
