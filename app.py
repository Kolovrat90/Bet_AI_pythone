import os
from datetime import datetime, date, time as dt_time
import streamlit as st
import pandas as pd

from betai.pipelines import scan_days
from betai.models import allocate_bank

# ‚îÄ‚îÄ Page config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="BetAI ‚Äì Value Betting Scanner", page_icon="‚öΩ", layout="wide")
st.markdown("# ‚öΩ BetAI ‚Äì Value Betting Scanner (MVP)")

# ‚îÄ‚îÄ API-–∫–ª—é—á ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
API_KEY = st.secrets.get("APIFOOTBALL_KEY") or os.getenv("APIFOOTBALL_KEY")
if not API_KEY:
    st.error("–ù—É–∂–µ–Ω –∫–ª—é—á APIFOOTBALL_KEY –≤ .streamlit/secrets.toml –∏–ª–∏ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

# ‚îÄ‚îÄ Inputs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
c0, c1, c2 = st.columns([1, 2, 2])
with c0:
    today_only = st.checkbox("–°–µ–≥–æ–¥–Ω—è", True)
with c1:
    edge_pct = st.slider("–ü–æ—Ä–æ–≥ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, %", 1, 10, 5)
with c2:
    bank = st.number_input("–ë–∞–Ω–∫, ‚Ç¨", min_value=10.0, step=50.0, value=1000.0, format="%.2f")

days = 1 if today_only else st.selectbox("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥", [1, 2, 3], 0)
top_n = st.selectbox("–¢–æ–ø-–ª–∏–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", [10, 15, 20, 25, 30], 0)

btn_scan = st.button("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á–∏", type="primary")
btn_calc = st.button("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–≤–∫–∏")

# ‚îÄ‚îÄ Cached scan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_data(show_spinner=False)
def _scan(d, e, n):
    return scan_days(d, e, n)

# ‚îÄ‚îÄ –®–∞–≥ 1: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn_scan:
    outs = _scan(days, edge_pct / 100.0, top_n)
    st.session_state["outs_raw"] = outs
    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(outs)} value-–∏—Å—Ö–æ–¥–æ–≤ (edge ‚â• {edge_pct}%)")

# ‚îÄ‚îÄ –®–∞–≥ 2: —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if "outs_raw" in st.session_state:
    outs = st.session_state["outs_raw"]

    # –°–æ–±–∏—Ä–∞–µ–º DataFrame –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    df = pd.DataFrame(o.model_dump() for o in outs)
    now = datetime.now()
    df = df[df.apply(
        lambda r: datetime.combine(date.fromisoformat(r.date),
                                   dt_time.fromisoformat(r.time)) > now,
        axis=1
    )].reset_index(drop=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ‚Ññ, Use, —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
    df.insert(0, "No", range(1, len(df) + 1))
    df.insert(1, "Use", True)
    df["Edge %"] = (df["edge"] * 100).round(1)
    df["Stake ‚Ç¨"] = 0
    df["Flag"] = df["flag_url"]
    df = df.rename(columns={
        "date":    "Date", "time":    "Time",
        "league":  "League", "match":  "Match",
        "pick_ru": "Pick",   "k_dec":   "Min Odds"
    })
    view = df[["No", "Use", "Date", "Time", "Flag", "League", "Match", "Pick", "Min Odds", "Edge %", "Stake ‚Ç¨"]]

    # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: –æ–¥–∏–Ω –¥–ª—è –º–µ—Ç—Ä–∏–∫, –≤—Ç–æ—Ä–æ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    metrics_ph = st.empty()
    table_ph   = st.empty()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π DataFrame
    edited = table_ph.data_editor(
        view,
        hide_index=True,
        column_config={
            "No":      st.column_config.NumberColumn("‚Ññ", format="%d", disabled=True),
            "Use":     st.column_config.CheckboxColumn(),
            "Flag":    st.column_config.ImageColumn("", width="small"),
            "Edge %":  st.column_config.NumberColumn(format="%.1f %"),
            "Stake ‚Ç¨": st.column_config.NumberColumn(format="%d"),
        },
        use_container_width=True,
    )

    # –ü–æ –Ω–∞–∂–∞—Ç–∏—é ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π –∏ —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—É
    if btn_calc:
        mask = edited["Use"].tolist()
        kept = [o for o, u in zip(outs, mask) if u]

        if not kept:
            st.warning("–ù–µ—á–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞.")
        else:
            # –ê–ª–ª–æ–∫–∞—Ü–∏—è –±–∞–Ω–∫–∞
            allocate_bank(kept, bank)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
            rows = []
            for o in kept:
                rows.append({
                    "Date":     o.date,
                    "Time":     o.time,
                    "Flag":     o.flag_url,
                    "League":   o.league,
                    "Match":    o.match,
                    "Pick":     o.pick_ru.replace("–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–•–æ–∑—è–µ–≤–∞")
                                      .replace("–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", "–ì–æ—Å—Ç–∏"),
                    "Min Odds": o.k_dec,
                    "Edge %":   f"{o.edge*100:.1f} %",
                    "Stake ‚Ç¨":  int(round(o.stake_eur))
                })
            res_df = pd.DataFrame(rows)
            res_df.insert(0, "No", range(1, len(res_df) + 1))

            # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            n_cols = len(res_df.columns)
            cols = metrics_ph.columns(n_cols)
            idx_min = res_df.columns.get_loc("Min Odds")
            idx_edge = res_df.columns.get_loc("Edge %")
            idx_stk  = res_df.columns.get_loc("Stake ‚Ç¨")
            cols[idx_min].metric("‚åÄ Min Odds", f"{res_df['Min Odds'].mean():.2f}")
            avg_edge = res_df["Edge %"].str.rstrip(" %").astype(float).mean()
            cols[idx_edge].metric("‚åÄ Edge %", f"{avg_edge:.1f} %")
            cols[idx_stk].metric("Œ£ Stake ‚Ç¨", f"{res_df['Stake ‚Ç¨'].sum()}")

            # –ò —Å–∞–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            table_ph.dataframe(
                res_df,
                hide_index=True,
                use_container_width=True,
                column_config={
                    "Flag":    st.column_config.ImageColumn("", width="small"),
                    "Stake ‚Ç¨": st.column_config.NumberColumn(format="%d"),
                },
            )
